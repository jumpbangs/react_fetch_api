{"version":3,"sources":["components/user/UserModal.js","components/user/User.js","components/user/Contacts.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["UserModal","this","props","userDetails","show","firstName","lastName","phone","address","email","profileImage","state","city","country","streetAddress","Modal","onHide","closeModal","bind","id","ModalHeader","className","src","alt","ModalBody","ModalFooter","onClick","Component","User","user","showModal","modalState","Contacts","contacts","users","map","key","Header","React","App","setState","value","fetch","then","res","json","data","catch","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46770683.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n/* Modal */\nimport Modal from \"react-bootstrap/Modal\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport ModalBody from \"react-bootstrap/ModalBody\";\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\n\nclass UserModal extends Component {\n    render() {\n        let {show, firstName, lastName, phone, address, email, profileImage} = this.props.userDetails;\n        let state = address['state'];\n        let city = address['city'];\n        let country = address['country'];\n        let streetAddress = address['streetAddress'];\n\n        if(!show){\n            return null;\n        }\n        return (\n            <Modal show={show} onHide={this.props.closeModal.bind(this, this.props.userDetails.id)}>\n                <ModalHeader>\n                    <div className='profileImage'>\n                        <img src={profileImage} alt=\"profileImage\" className='rounded-circle'/>\n                    </div>\n                </ModalHeader>\n                <ModalBody>\n\n                    <div className='basicInfo'>\n                        <h3>Basic Info</h3>\n                        <ul className='userList'>\n                            <li>Name : {firstName} {lastName}</li>\n                            <li>Contact  : {phone}</li>\n                            <li>Email : {email}</li>\n                        </ul>\n                    </div>\n\n                    <div className='addressInfo'>\n                        <h3>Address Info</h3>\n                        <ul className='userList'>\n                            <li>Address  : {streetAddress}</li>\n                            <li>City     : {city}</li>\n                            <li>State    : {state}</li>\n                            <li>Country  : {country}</li>\n                        </ul>\n                    </div>\n\n                </ModalBody>\n                <ModalFooter>\n                    <button onClick = {this.props.closeModal.bind(this, this.props.userDetails.id)} >Close</button>\n                </ModalFooter>\n            </Modal>\n        )\n    }\n}\n\nexport default UserModal;","import React, {Component} from \"react\";\n\nimport UserModal from \"./UserModal\";\n\nclass User extends Component {\n\n    render() {\n        const user = this.props.userDetails;\n        return(\n            <div className='pt-3'>\n                <div className='card cardUser' onClick={this.props.showModal.bind(this, user.id)}>\n                        <div className='container p-3'>\n                            <div className='row'>\n                                <div className='col-sm-3'>\n                                    <img src={user.profileImage} alt=\"profileImage.jpg\" className='rounded-circle img-fluid'/>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <div className='card-body' >\n                                        <div className='card-title'> Name : {user.firstName} {user.lastName}</div>\n                                        <div className='card-text'> Email: {user.email}</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                </div>\n                <UserModal userDetails ={user} showModal ={this.props.showModal} modalState={user.show} closeModal={this.props.closeModal}/>\n            </div>\n\n        )\n    }\n\n}\n\nexport default User;","import React, {Component} from \"react\";\nimport User from \"./User\";\n\nclass Contacts extends Component{\n    render() {\n        return(\n            <div className='container'>\n                {\n                    this.props.contacts.users.map((user) =>(\n                        <User key={user.id} userDetails={user} showModal={this.props.modalState} modalState = {user.show} closeModal={this.props.closeModal}/>\n                        ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default Contacts;","import React from \"react\";\n\nclass Header extends React.Component{\n    render() {\n        return(\n            <header>\n                <div className='peopleHeader'>\n                    <h1>People</h1>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './styles/reset.css';\nimport './styles/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Contacts from \"./components/user/Contacts\";\nimport Header from \"./components/layout/Header\";\n\n\nclass App extends Component {\n\n    state = {\n        users:[],\n    };\n\n    showModal = (id) => {\n        // console.log(id);\n        this.setState({\n            users:this.state.users.map((value) => {\n                if(value.id === id){\n                    value.show = true;\n                }\n                return value;\n            })\n        })\n    };\n\n    closeModal = (id) => {\n        // console.log(id);\n        this.setState({\n            users:this.state.users.map((value) => {\n                if(value.id === id){\n                    value.show = false;\n                }\n                return value;\n            })\n        })\n    };\n\n\n  componentDidMount() {\n    fetch('https://mock-io.herokuapp.com/users')\n        .then(res => res.json())\n        .then((data) => {\n            data.map((value) => {\n                value.show = false;\n                return value;\n            })\n          this.setState({users: data})\n        })\n        .catch(console.log);\n  }\n\n\n  render() {\n    return(\n        <div>\n            <Header />\n            <Contacts contacts = {this.state} modalState = {this.showModal}  closeModal = {this.closeModal} />\n        </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}